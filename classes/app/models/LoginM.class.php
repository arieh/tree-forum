<?php
/*
 * actions:
 * 		+'login': attempt to login using login data supplied by userAtuh CS library
 * 			required:
 * 				- 'user-name' (string): user name. must be longer than 1 char.
 * 				- 'hash' (string): a hash produced by the client-side library. must be 40 chars long
 * 			optional:
 * 				- 'ini' (string): location of the userAtuh config file. if not supplied will attempt to use default one.
 * 				- 'encoded' (bool) : whether or not the password in the DB is hashed using sha1 or not (default: TRUE)
 * 			errors:
 * 				- 'badIni' : ini file supplied by 'ini' param does not exists. 
 * 				- 'badName' : name is invalid
 * 				- 'badHash' : hash is invalid
 * 				- 'badMatch' : login data do not match (incorrect name/password)
 * 		+'generate': generate userAtuh key for a new login form
 * 			optional:
 * 				- 'ini' (string): location of the userAtuh config file. if not supplied will attempt to use default one.
 * 			errors:
 * 				- 'badIni' : ini file supplied by 'ini' param does not exists.
 * 			accessors:
 * 				- (string) getKey() : returns generated key
 * 		+'logout': loggs user out
 */

/**
 * this class is a wrapper for the userAtuh library. 
 * 
 * this class is ment to bridge between TFUser and the userAtuh library. this is important to notice,
 * as it is dependant on them both to function.
 */
class LoginM extends TFModel{
	/**
	 * @param string a key generated by userAtuh
	 * @access protected
	 */
	protected $_key = '';
	
	/**
	 * @param keyHandler a userAtuh key-kandler
	 * @access private
	 */
	private $_handler = null;
	
	/**
	 * @param string location of the userAtug config file
	 * @access protected
	 */
	protected $_ini = '../configs/userAtuh.ini';
	
	/**
	 * @see <TFModel.class.php>
	 */
	protected $_actions = array('login'=>'login','logout'=>'logout','generate'=>'generate');
	
	/**
	 * @see <TFModel.class.php>
	 */
	protected $_default_action = 'generate';
	
	/**
	 * sets the keyHandler
	 * @access private
	 */
	private function setHandler(){
		$this->_handler = new keyHandler(NewDao::getLink(),$this->getIni());
	}
	
	/**
	 * generates a key using keyHandler
	 * @access protected
	 */
	protected function generate(){
		if ($this->isOptionSet('ini')) $this->_ini = $this->getOption('ini');
		if (!file_exists($this->getIni())){
			$this->setError('badIni');
		}
		
		if ($this->isError()) return;
		
		$this->setHandler();
		$this->_handler->generateKey();
		$this->_key = $this->_handler->getKey(); 
	}
	
	/**
	 * attempts to login
	 * @access protected
	 */
	protected function login(){
		if ($this->isOptionSet('ini')) $this->_ini = $this->getOption('ini');
		if (!file_exists($this->getIni())){
			$this->setError('badIni');
		}
		
		$name = $this->getOption('user-name');
		if (!is_string($name) || strlen($name)<2 || $this->doesNameExists($name,$this->isDebug())==false) $this->setError('badName');
		
		$hash  = $this->getOption('hash');
		if (!is_string($hash) || strlen($hash)<40) $this->setError('badHash');
		
		$encoded = ($this->isOptionSet('encoded')) ? (bool)$this->getOption('encoded') : true;
		
		if ($this->isError()) return;
		
		if ($this->_handler->authenticate($name,$hash,$encoded)){
			TFUser::setId($this->retrieveUserId($name,$this->isDebug()));
		}else $this->setError('badMatch');
	}   
	
	/**
	 * checks to see if a user exists by that name
	 * 	@param string $name user name
	 * 	@param bool   $log log queries?
	 * @access private
	 * @return bool
	 */
	private function doesUserExists($name,$log=false){
		return ($this->_link->countFieldsLCASE('users',array('name'=>strtolower($name)),$log)>0);
	}
	
	/**
	 * retrieves the user's id
	 * 	@param string $name user name
	 * 	@param bool   $log log queries?
	 * @access private
	 * @return int
	 */
	private function retrieveUserId($name,$log=false){
		$res = $this->_link->selectLCASE('users',array('id'),array('name'=>strtolower($name)),true,$log);
		return $res['id'];
	}
	
	/**
	 * logout the user
	 */
	protected function logout(){
		TFUser::logOut();
	}
}

class LoginMException extends TFModelException{}
?>